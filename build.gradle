apply plugin: 'cpp'

def setHeaderPathOrAssert( headerName, headers ) {
    def headerPaths = [ "/usr/local/include", "/usr/include" ]
    def foundHeaders = false
    for( fname in headerPaths ) {
        def locName = fname;
        if( fname[-1] != "/" ) {
            locName = fname + "/"
        }
        if( file( locName ).exists() &&
            file( locName + headerName ).exists() ) {
            headers.srcDir locName + headerName
            foundHeaders = true
            break;
        }
    }
    assert foundHeaders : headerName
}

def setLinkPathOrAssert( fileName, isStatic, binaries ) {
    def linkPaths = [ "/usr/local/lib", "/usr/lib", "/usr/lib/x86_64-linux-gnu" ]
    def foundLink = false
    for( fname in linkPaths ) {
        def locName = fname;
        if( fname[-1] != "/" ) {
            locName = fname + "/"
        }
        if( file( locName ).exists() &&
            file( locName + fileName ).exists() ) {
            if( !isStatic ) {
                binaries.withType(SharedLibraryBinary) {
                    sharedLibraryFile = file( locName + fileName )
                }
            } else {
                binaries.withType(StaticLibraryBinary) {
                    staticLibraryFile = file( locName + fileName )
                }
            }
            foundLink = true
            break;
        }
    }
    assert foundLink : fileName

}

model {
    binaries {
        all {
            if( toolChain in Gcc ) {
                cppCompiler.args "-g", "-lpthread", "-march=native", "-Wall", "-Werror", "-std=c++17", "-DDEBUG", "-O3"
            }
        }
    }
    repositories {
        libs(PrebuiltLibraries) {
            glog {
                setHeaderPathOrAssert( "glog", headers )
                setLinkPathOrAssert( "libglog.so", false, binaries )
            }
            gmock {
                setHeaderPathOrAssert( "gmock", headers )
                setLinkPathOrAssert( "libgmock.so", false, binaries )
            }
            gflags {
                setHeaderPathOrAssert( "gflags", headers )
                setLinkPathOrAssert( "libgflags.so", false, binaries )
            }
            gtest {
                setHeaderPathOrAssert( "gtest", headers )
                setLinkPathOrAssert( "libgtest.so", false, binaries )
            }
            pthread {
                headers.srcDir "/usr/include/"
                setLinkPathOrAssert( "libpthread.so", false, binaries )
            }
            boost_serialization {
                headers.srcDir "/usr/include/"
                setLinkPathOrAssert( "libboost_serialization.so", false, binaries )

            }
            /*
            folly {
                setHeaderPathOrAssert( "folly", headers );
                setLinkPathOrAssert( "libfolly.so", false, binaries )
            }
            */
        }
    }
    components {
        logMiner(NativeExecutableSpec) {
            sources {
                cpp.lib library: 'gflags', linkage: 'shared'
                cpp.lib library: 'glog', linkage: 'shared'
                cpp.lib library: 'pthread', linkage: 'shared'
                cpp.lib library: 'boost_serialization', linkage: 'shared'
                //cpp.lib library: 'folly', linkage: 'shared'
                cpp {
                    source {
                        srcDir "src"
                        include "**/*.cc"
                        exclude "**/main_same_file_detector.cc"
                        exclude "**/main_dump_map.cc"
                    }
                }
            }
        }
        detector(NativeExecutableSpec) {
            sources {
                cpp.lib library: 'glog', linkage: 'shared'
                cpp.lib library: 'gflags', linkage: 'shared'
                cpp.lib library: 'pthread', linkage: 'shared'
                cpp.lib library: 'boost_serialization', linkage: 'shared'
                //cpp.lib library: 'folly', linkage: 'shared'
                cpp {
                    source {
                        srcDir "src"
                        include "**/*.cc"
                        exclude "**/main_miner.cc"
                        exclude "**/main_dump_map.cc"
                    }
                }
            }
        }

        dump_map(NativeExecutableSpec) {
            sources {
                cpp.lib library: 'gflags', linkage: 'shared'
                cpp.lib library: 'glog', linkage: 'shared'
                cpp.lib library: 'pthread', linkage: 'shared'
                cpp.lib library: 'boost_serialization', linkage: 'shared'
                //cpp.lib library: 'folly', linkage: 'shared'
                cpp {
                    source {
                        srcDir "src"
                        include "**/*.cc"
                        exclude "**/main_miner.cc"
                        exclude "**/main_same_file_detector.cc"
                    }
                }
            }
        }



        unitTest(NativeExecutableSpec) {
            binaries.all {
                cppCompiler.define "UNIT_TEST"
            }
            sources {
                cpp.lib library: 'gflags', linkage: 'shared'
                cpp.lib library: 'glog', linkage: 'shared'
                cpp.lib library: 'gmock', linkage: 'shared'
                cpp.lib library: 'pthread', linkage: 'shared'
                cpp.lib library: 'boost_serialization', linkage: 'shared'
                //cpp.lib library: 'folly', linkage: 'shared'
                cpp {
                    source {
                        srcDir "test"
                        srcDir "src"
                        include "**/*.cc"
                        exclude "**/main_*.cc"
                    }
                }
            }
        }
    }
}
